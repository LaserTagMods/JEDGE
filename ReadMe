# Blynk---ESP32
Blynk Esp32 JEDGE 2.0

//***************************************************
//************   JEDGE Introduction   ***************
//***************************************************

The JEDGE App and ESP32 modules are used in conjunction with a Blynk Server to be able to controll, set up, program games etc. 
for all of your BRX taggers at one time. While the BRX is one of the most awesome laser tag systems you can get for its price
point, it does have its limitations. Callsign application with smart phones make for a very customizable game play, breaking the bounds
of the standalone brx modes available. However, callsign has some limitations with requiring a cell phone with every tagger, coupled with
a cellular plan or a restricted area based upon a limited wifi network range. Some are able to overcome the obstaclet but still some are left
wanting more features, Including myself. 

JEDGE is an open source project that was mostly coded by one individual, but with contributions from many, to pull it all together. Thousands of thanks
are owed to all of those who have contributed to this work in the devlopment of JEDGE. It would not have been possible without your support!

JEDGE uses a local wifi network and a local server (ran from a laptop/PC or a raspberri Pi) running Java. The Java based server works as a communications
hub between a mobile application (ran either on a PC, phone or tablet - IOS and Android) and individual microcontrollers that share a similar code. The only
differences between one microcontroller and another, is that they share a different ID or GUN ID for each tagger they are installed on. The devices do need 
to be hard wired in with quick disconnect means. If you wish to integrate this system, you will need to be handy, or know someone who is, with a soldering
Iron. Don't be intimidated though, it is easy to learn and get good at it with a bit of practice. The microcontrollers can be powered by the BRX Tagger and
fit inside the battery compartment of the tagger. Soldering the connections correctly will not compromise the functionality of the tagger. In fact, the
offline game modes still will work exactly as before the JEDGE upgrade and even callsign and battle royale (manufacturer supported mobile apps) will still
work normally. The worse that can happen is that you damage the bluetooth connectivity with a poor quality solder and then you render the mobile applications
non functional... leaving offline game modes still functional. This is a risk to be aware of... but as they say, no risk, no reward. We are constantly working
on improvements to the game functions for JEDGE... Unlike the manufacturer for their mobile apps, and there is much more versatility in JEDGE. 

*** NOTE: This is an opensource design, not supported by the manufacturer but an aftermarket modification to the equipment, proceed at your own risk. As is
with all open source projects, this is free to all. Not to be profitted from without authorization from the original designer/coder of the project. This is 
put together by a great group of individuals who shared a common interest and got together to share ideas and make it happen, please do not take advantage of
their time and efforts. If you wish to contribute, please do so. The group is found on facebook: BRX Elite Owners Group and the forum: lasertaginfo.org. Also,
No promises of support, guarantees of functionality/performance are provided with this collaborative project.

General Use Guidelines:

The system is designed so that all players start in the same location, within range of a control station that consisting of a Wifi Router, Access Point, Blynk
Java Server, and a mobile device running the associated application. Then:

1. One individual uses the mobile app to modify the game settings as desired
2. Taggers announce confirmations of the game settings being selected
2. The individual using the mobile app presses "start game"
3. Players' taggers announce that it is time to "move out"
4. Players disperse and the game starts as had been programmed by the application
5. After receiving the notification to "move out", players no longer need to stay within range of the wifi access point
6. After the players either (1) run out of lives, (2) game objectives are met, (3) time runs out, Players should return to the starting location near the control station
7. Upon returning, the individual using the app, can either (1) send new game settings, (2) press start game to repeat the previous game, (3) sync scores, as applies, (4) any combination of the previous options
8. At some point, playing within the wireless network range may enable certain game features/modes. At the time of this update (1/21/2021) this is not the case

//***************************************************
//************   General      Stuff   ***************
//***************************************************

install esp32 boards to your arduino IDE:
https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-windows-instructions/

Tip: when installing the JSON resources, you can return in the JSON library references to keep both the 8266, esp32 boards always available from the dropdown board selections

My boards Purchased:
https://www.aliexpress.com/item/32827149250.html?spm=a2g0s.9042311.0.0.6f5d4c4drgvrDP
https://www.aliexpress.com/item/32651747570.html?spm=a2g0s.9042311.0.0.6f5d4c4drgvrDP

Pi purchased/used:
https://www.amazon.ae/CanaKit-Raspberry-Starter-Premium-Black/dp/B07BCC8PK7

//***************************************************
//******** Step 1. Setting up Blynk App *************
//***************************************************
1. I recommend you using a blynk server on your pc or a raspberry pi
   this will make it so you dont have to ever buy energy credits from blynk
   it also is not dependent upon an internet connection
2. go to the github and open up the only jpeg image in the repository main folder: https://github.com/LaserTagMods/Blynk---ESP32/tree/master/Laser%20Tag%20Configurator%20with%20LCD
3. download and install blynk to your tablet/phone of choice
4. create account / login
5. determine if you will be using a local server and get that set up... see next section., otherwise proceed to next step
6. Once you are in blynk and ready to start, you can add a new project by scanning a qr in the upper corner by pressing the qr scann symbol. scan the jpeg and it will automatically upload the app into your server


//***************************************************
//*********   2.  Installing Blynk Server   *********
//***************************************************

https://github.com/blynkkk/blynk-server

0. remove old java stuff! (uninstall any existing java versions)
1. Install java environment
2. verify our ip address
3. run the blynk server!!!
4. setting up designated or static ip addresses with router
5. initial login on blynk server
6. building the app



1. install java environment:
 go to https://github.com/blynkkk/blynk-server#blynk-server
 verify if i have java already! java -version, this is done in command prompt
 download version 8 or 11 of java and install
 check version again, if not right, go to settings and fix the path!
 if you have java already, uninstall the old version and make sure you fix the path... the bin file folder in the java program folders

2. Verifiy Ip Address
	open command prompt
	then type ipconfig hit enter
	identify the network, wired or wireless
		look for ipv4 address... should be something like: 192.168.1.80

3. run blynk server!
	go to web and download it or open my file im giving you! here is the link https://github.com/blynkkk/blynk-server/releases/download/v0.41.12/server-0.41.12-java8.jar
	run the jar file in jav application... through command prompt!
		first get command prompt to the right file folder
		i copied the blynk server file to simplify name for execution
		enter in command prompt:
			"java -jar blynk.jar -dataFolder /server_data"
		login email for blynk is admin@blynk.cc and password is admin
	**** I made it easier for you though, just double click the run blynk server application!

4. setting static ip addresses:
	this process may vary but im using an asus router and the process is all the same for all asus routers.
	connect the device to the wifi network
	use a pc to go to the admin settings of the router, follow the ip address for the "gateway" to router
	log in with admin priveledges, if you dont know them, reset router and use admin/admin as user and password or see the manual
	identify connected clients and enable manual ip address assignment in the LAN settings for each device.

5. Initial login to blynk server
	pull it together now... we need to do two things and in this order!!!!
		first connect to the router or access point.. then run the blynk server.. in that order!
	then you can open the blynk app and login to the server...

**** Alternatively, install on a raspberry Pi *******
https://github.com/blynkkk/blynk-server

reference raspberry pi install instructions, then set it so it launches automatically by following instructions labeled: 
"Enabling server auto restart on unix-like systems"

//***************************************************
//********   Step 3. Prepping the BRX   *************
//***************************************************
The BRX has some anoying audio files and limited gun name conventions in the audio driver. 
Within the repository are new audio files that should be added to each BRX Audio folder. The files
Are GN01 through GN19. These are used by the Configurator to identify what gun players are selecting when manual
Weapon selection is enabled. This is highly recommended. Also it's Paul's voice which makes it kinda cool

Also, delete or rename the following audio file names to make them stop being annoying or interupting start up time

I just renamed them so i can recall them later if I want:
VA9U changed to XYZ1
JA9 changed to XYZ2

Others just have changed the extension from LTP to OLD, whatever works.

Keep in mind that if you remove the music, it does limit your ability to put the tagger into target mode, target mode requires a button held for an extended time before getting into game options.

//***************************************************
//****  4. Preping Controller - scoring device ******
//***************************************************
Use ESP32 mini or other is used for score tracking and game clock tracking as well
This is a non-essential device but if you want scoring reporting on the blynk app, it is essential

Check to see the authorization code for both the scoring device as well as the configurator. Both of these codes need to be copied and pasted and entered into the code...

Also make sure to adjust the quantity of taggers you have/using with configurators.

Watch these videos for tips and understand what im talking about above:
https://youtu.be/oSk3vjSn00U
https://youtu.be/WS5DaqnMdFM


//***************************************************
//************ Preping a Configurator ***************
//***************************************************

Gen 2 and later:
Hardware: ESP32 D1 Mini

Solder, connect, wire, etc. pins: 
16 to the tagger Bluetooth rx pin or brx tx pin 17 to Bluetooth tx pin or brx rx pin, Vcc to Vcc,

Board Manager Specifics:
ESP32: Use Wemos D1 Mini ESP32 board and change partition scheme to "Minimum Spiffs (large apps with OTA)"

Before thinking about uploading the software, watch the following tips videos for the programs to make sure you set up the code properly:
ESP32 code: https://youtu.be/S4vJf7yOa5A
Also make sure you do the blynk stuff first!!! you need your blynk authentication codes!!!

Key points:
2. Update the wifi network you are using (32/8266)
4. update the server settings in the setup section of the code near the bottom of the code under the setup portion (8266)

I recommend testing one tagger out before proceeding the the next one to make sure you got it right and before you repeat the process for multiple taggers


//***************************************************
//************     5. OTA Updating    ***************
//***************************************************

If you are updating to a new configurator firmware version/release and are already running an OTA version:

Before beginning, make sure your running Python on your computer:
  For Python installation to enable OTA update from your Arduino IDE, follow Step #1: https://lastminuteengineers.com/esp8266-ota-updates-arduino-ide/

1. Pressing the OTA button causes both the esp32 to stop listening to blynk (which interupts the upload) Be sure to have your blynk server connected and then press this button
   this will ensure that your esp32 is only listening to the OTA Python uploading software
2. Connect your computer to an available LAN port on your JEDGE router. This ensures that you are able to see the ESP32s.
   This is not an requirement per say as Ive been able to update firmware OTA without being connected to the LAN, but it is buggy and troublesome.
   If not using LAN you may have to close your arduino IDE out completely and re-open it and possibly restart your computer in order to view the esp32 ports
3. Under tools in the Arduino IDE, you will now see the serial numbers listed for all the taggers that are sitting in OTA UPDATE Mode. 
   Also note that they are displayed by the tagger ID number as well. This is so you can identify each tagger and update them one by one
   IF they are not listed, restart your computer, if not fixed, then have you installed python on your PC? Follow these online tutorial above.
4. Now that you have selected the correct port for the tagger that you want to update, just press the upload button.

Here is a good reference as well if you want to learn more: https://randomnerdtutorials.com/esp8266-ota-updates-with-arduino-ide-over-the-air/

Tip: Also, if your having a hard time getting the esp32s to respond to arduino IDE OTA, it could be the router firewall... Ive had a tough time with some routers 
and a cake walk with others... I recommend opening your firewall settings and allowing arduino and espota.py applications through the firewall, or just disable 
The firewall while you update the taggers.




//***************************************************
//********     6. Configurator install    ***********
//***************************************************

Gen 2 install:

https://youtu.be/rDPo6_XNH6k



//***************************************************
//******     7.  Using the Configurator    ********
//***************************************************

Turn in the taggers, have the Configurator running, press enable BLE controll

Here is the settings walkthrough:
https://youtu.be/9SlVQpf7_Y8



//***************************************************
//******     8.  App Updates    ********
//***************************************************

Any time you need/want to update the blynk app for changes 
made, this brings in a brand new app with a new authentication 
token for your devices. This will make it impossible for your 
devices to connect to the new app because the old auth token 
is written into the code of the esp devices... therefore, your 
devices need to be updated with a new sketch from arduino before 
you can use the new app. This is easy to manage by just following 
an important order of operations.

1. In the blink app back out of the current app/project by tapping on 
The top left hand icon that looks like several pages.
2. A week scanner icon will appear in the top right corner. Tap it.
3. Scan the updated app QR code to automatically bring in the new app.
4. The old app will still be available on your phone and the server
5. Check the new app's updated auth tokens, and copy them down to type or paste.
6. Update the old token in arduino ide or on the new sketch if applicable
7. Using the old app, place your devices in OTA mode and follow the instructions for OTA UPDATES
8. After updating them the new app will allow for the devices to connect since it uses the new auth token
9. Rename the old app if you want to keep it on your server or delete it if you decide to no longer keep use it


GETTING STARTED
Blynk server
Blynk Server is an Open-Source Nettybased Java server, responsible for forwarding messages between Blynk mobile application and various microcontroller boards and SBCs (i.e. Arduino, Raspberry Pi. etc).
Download latest server build here.
     
Requirements
•	Java 8/11 required (OpenJDK, Oracle)
•	Any OS that can run java
•	At least 30 MB of RAM (could be less with tuning)
•	Open ports 9443 (for app and hardware with ssl), 8080 (for hardware without ssl)
Quick local server setup on Raspberry PI
•	Login to Raspberry Pi via ssh;
•	Install java 8:
•	  sudo apt install openjdk-8-jdk openjdk-8-jre
•	Make sure you are using Java 8 or newer
•	  java -version
•	  Output: java version "1.8"
•	Download Blynk server jar file (or manually copy it to Raspberry Pi via ssh and scp command):
•	  wget "https://github.com/blynkkk/blynk-server/releases/download/v0.41.13/server-0.41.13-java8.jar"
•	Run the server on default 'hardware port 8080' and default 'application port 9443' (SSL port)
•	  java -jar server-0.41.13-java8.jar -dataFolder /home/pi/Blynk
That's it!
•	As output you will see something like that:
•	  Blynk Server successfully started.
•	  All server output is stored in current folder in 'logs/blynk.log' file.
Enabling server auto restart 
•	To enable server auto restart find /etc/rc.local file and add:
•	  java -jar /home/pi/server-0.41.13-java8.jar -dataFolder /home/pi/Blynk &
•	Or if the approach above doesn't work, execute
•	  crontab -e
add the following line
    @reboot java -jar /home/pi/server-0.41.13-java8.jar -dataFolder /home/pi/Blynk &
save and exit.
Quick local server setup on Raspberry PI
•	Login to Raspberry Pi via ssh;
•	Install java 8:
•	  sudo apt install openjdk-8-jdk openjdk-8-jre
•	Make sure you are using Java 8 or newer
•	  java -version
•	  Output: java version "1.8"
•	Download Blynk server jar file (or manually copy it to Raspberry Pi via ssh and scp command):
•	  wget "https://github.com/blynkkk/blynk-server/releases/download/v0.41.13/server-0.41.13-java8.jar"
•	Run the server on default 'hardware port 8080' and default 'application port 9443' (SSL port)
•	  java -jar server-0.41.13-java8.jar -dataFolder /home/pi/Blynk
That's it!
•	As output you will see something like that:
•	  Blynk Server successfully started.
•	  All server output is stored in current folder in 'logs/blynk.log' file.

Quick update for blynk server/apps Raspberry PI
•	First end the blynk server if currently running:
•	     Open a command prompt
•	     Type “ps -A” and press enter
•	     Scroll to see the process called “Java” and note the process number to the left
•	     Type “kill -9 (process ID of Java) ex. “kill -9 1234”
•	     Now blynk server is terminated
•	Next let’s back up your user database and upload the updated one:
•	     Open your file explorer and navigate to the blynk folder
•	     In the blynk folder you will see a file named by your blynk login for the server
•	          Admin@blynk.cc
•	     Save a copy of this file in another directory
•	     Paste in the new file provided to update the old server database
•	Finally, test it out:
•	     Be sure to close the mobile app
•	     Restart the blynk server (restart pi if auto loaded on boot)
•	     Restart the mobile app after a couple of minutes
•	     Login to the server as usual and verify the update

//***************************************************
//********         9.  JEDGE troubleshooting       *********
//***************************************************

There’s ways to trouble shoot:
1st one:
Debug mode on brx to watch serial output: indicates if your connections are 
good between pin 17 and the brx rx pin
2nd one:
Player select mode: put brx in weapon or team select to confirm that cabling 
is good between pin 16 and brx tx pin
3rd one:
Use serial monitor on esp (outside brx) and watch for confirmations for commands 
being sent from app as well as watch for blynk connected notification every 
couple of seconds, if disconnects occur often, it’s either a network or esp32 issue.
 If weird stuff is going on across the board on multiple esp32s and it’s not 
isolated to one or two, it’s a code issue and I screwed something up. Note that
 while in game, code stops looking for blynk server to reduce some energy consumption.
 It still looks just not as often, once every couple of seconds instead of thousands 
of times per minute but serial monitor won’t print connection status while in a game.
4th one:
Terminal widget in the app allows fir copy and paste of any Uart string to send to Taggers
